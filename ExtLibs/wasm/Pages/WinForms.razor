@page "/WinForms"
@using SkiaSharp.Views.Blazor
@using SkiaSharp
@using System.Windows.Forms
@using MouseEventArgs = Microsoft.AspNetCore.Components.Web.MouseEventArgs
@using System.Threading
@using System.Drawing

<h3>WinForms</h3>

<SKGLView @ref="_skglview" IgnorePixelScaling="true" EnableRenderLoop="true" OnPaintSurface="OnPaintSurface" @onclick="Callback"  style="width: 100%; height: 75%;"/>

@code {

    SKGLView _skglview;
    
    static WinForms instance;

    protected override void OnInitialized ()
    {
        instance = this;
        base.OnInitialized ();

        //XplatUIMine.GetInstance()._virtualScreen = new Rectangle(0, 0, (int) size.Width, (int) size.Height);
        //XplatUIMine.GetInstance()._workingArea = new Rectangle(0, 0, (int) size.Width, (int) size.Height);

        Console.WriteLine($"screen info {Screen.PrimaryScreen}");

        Application.Idle += Application_Idle;
        {
            var frm = new Form();
            frm.Location = new Point(30, 50);
                frm.Text = "test";
            frm.Width = 200;
            frm.Name = "test";
            frm.Height = 250;
            frm.FormBorderStyle = FormBorderStyle.Fixed3D;
            frm.WindowState = FormWindowState.Maximized;

            frm.Controls.Add(new Button());
            frm.Controls.Add(new Button());
            frm.Controls.Add(new Button());
            frm.Show();
        }       
        {
            var frm = new Form();
            frm.Text = "test2";
            frm.Name = "test2";
            frm.Width = 200;
            frm.Height = 250;
            frm.FormBorderStyle = FormBorderStyle.Fixed3D;
            frm.WindowState = FormWindowState.Maximized;

            frm.Controls.Add(new Button());
            frm.Controls.Add(new Button());
            frm.Controls.Add(new Button());
            frm.Controls.Add(new Button());


            MissionPlanner.Program.Main(new string[]{});
        }
    }

    private void Application_Idle(object sender, EventArgs e)
    {
        if (XplatUIMine.PaintPending)
        {

            XplatUIMine.PaintPending = false;
        }


    }


    private SKPaint paint = new SKPaint() {FilterQuality = SKFilterQuality.Low};

    private bool DrawOntoCanvas(IntPtr handle, SKCanvas Canvas, bool forcerender = false)
    {
        var hwnd = Hwnd.ObjectFromHandle(handle);

        var x = 0;
        var y = 0;
        var wasdrawn = false;

        XplatUI.driver.ClientToScreen(hwnd.client_window, ref x, ref y);

        var width = 0;
        var height = 0;
        var client_width = 0;
        var client_height = 0;


        if (hwnd.hwndbmp != null && hwnd.Mapped && hwnd.Visible && !hwnd.zombie)
        {

            Monitor.Enter(XplatUIMine.paintlock);

            if (hwnd.ClientWindow != hwnd.WholeWindow)
            {
                var frm = Control.FromHandle(hwnd.ClientWindow) as Form;

                Hwnd.Borders borders = new Hwnd.Borders();

                if (frm != null)
                {
                    borders = Hwnd.GetBorders(frm.GetCreateParams(), null);
                    //Canvas.Restore();
                }
                else
                {
    // setup clip
                    var parent = hwnd;
    //Canvas.Restore();

                    while (parent != null)
                    {
                        var xp = 0;
                        var yp = 0;
                        XplatUI.driver.ClientToScreen(parent.client_window, ref xp, ref yp);

                        Canvas.ClipRect(SKRect.Create(xp, yp, parent.Width, parent.Height),
                            SKClipOperation.Intersect);
                    
                        parent = parent.parent;
                    }
                }

                if (Canvas.DeviceClipBounds.Width > 0 &&
                    Canvas.DeviceClipBounds.Height > 0)
                {
                    if (hwnd.DrawNeeded || forcerender)
                    {
                        if (hwnd.hwndbmpNC != null)
                            Canvas.DrawImage(hwnd.hwndbmpNC,
                                new SKPoint(x - borders.left, y - borders.top), new SKPaint()
                                {
                                    ColorFilter =
                                        SKColorFilter.CreateColorMatrix(new float[]
                                        {
                                            0.75f, 0.25f, 0.025f, 0, 0,
                                            0.25f, 0.75f, 0.25f, 0, 0,
                                            0.25f, 0.25f, 0.75f, 0, 0,
                                            0, 0, 0, 1, 0
                                        })
                                });

                        Canvas.ClipRect(
                            SKRect.Create(x, y, hwnd.width - borders.right - borders.left,
                                hwnd.height - borders.top - borders.bottom), SKClipOperation.Intersect);
                                
                        Canvas.DrawDrawable(hwnd.hwndbmp,
                            new SKPoint(x, y));

                        wasdrawn = true;
                    }

                    hwnd.DrawNeeded = false;
                }
                else
                {
                    Monitor.Exit(XplatUIMine.paintlock);
                    return true;
                }
            }
            else
            {
                if (Canvas.DeviceClipBounds.Width > 0 &&
                    Canvas.DeviceClipBounds.Height > 0)
                {
                    if (hwnd.DrawNeeded || forcerender)
                    {
                        Canvas.DrawDrawable(hwnd.hwndbmp,
                            new SKPoint(x + 0, y + 0));

                        wasdrawn = true;
                    }

                    hwnd.DrawNeeded = false;
    /*
                        surface.Canvas.DrawText(Control.FromHandle(hwnd.ClientWindow).Name,
                            new SKPoint(x, y + 15),
                            new SKPaint() {Color = SKColor.Parse("55ffff00")});
                        /*surface.Canvas.DrawText(hwnd.ClientWindow.ToString(), new SKPoint(x,y+15),
                            new SKPaint() {Color = SKColor.Parse("ffff00")});*/

                }
                else
                {
                    Monitor.Exit(XplatUIMine.paintlock);
                    return true;
                }
            }

            Monitor.Exit(XplatUIMine.paintlock);
        }

        var ctrl = Control.FromHandle(hwnd.ClientWindow);

        Canvas.DrawText(x + " " + y + " " + ctrl.Name + " " + hwnd.width + " " + hwnd.Height, x, y + 10, new SKPaint() {Color = SKColors.Red});

        if (hwnd.Mapped && hwnd.Visible)
        {
            IEnumerable<Hwnd> children;
            lock (Hwnd.windows)
                children = Hwnd.windows.OfType<System.Collections.DictionaryEntry>()
                    .Where(hwnd2 =>
                    {
                        var Key = (IntPtr) hwnd2.Key;
                        var Value = (Hwnd) hwnd2.Value;
                        if (Value.ClientWindow == Key && Value.Parent == hwnd && Value.Visible &&
                            Value.Mapped && !Value.zombie)
                            return true;
                        return false;
                    }).Select(a => (Hwnd) a.Value).ToArray();

            children = children.OrderBy((hwnd2) =>
            {
                var info = XplatUIMine.GetInstance().GetZOrder(hwnd2.client_window);
                if (info.top)
                    return 1000;
                if (info.bottom)
                    return 0;
                return 500;

            });

            foreach (var child in children)
            {
                DrawOntoCanvas(child.ClientWindow, Canvas, true);
            }
        }

        return true;
    }


    private void OnPaintSurface(SKPaintGLSurfaceEventArgs e)
    {
        try
        {
            Application.RunLoopProcess();

            var canvas = e.Surface.Canvas;

            canvas.Clear(SKColors.Gray);

            canvas.Scale((float) scale.Width, (float) scale.Height);

            canvas.Save();

            canvas.DrawText("" + DateTime.Now.ToString("HH:mm:ss.fff"),
                new SKPoint(10, 30), new SKPaint() {Color = SKColor.Parse("ffff00")});

            foreach (Form form in Application.OpenForms)
            {
                if (form.IsHandleCreated)
                {
                   // if (form is MainV2 && form.WindowState != FormWindowState.Maximized)
                        //form.BeginInvokeIfRequired(() => { form.WindowState = FormWindowState.Maximized; });

                    try
                    {
                        DrawOntoCanvas(form.Handle, canvas, true);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex);
                    }
                }
            }

            IEnumerable<Hwnd> menu;
            lock (Hwnd.windows)
                menu = Hwnd.windows.Values.OfType<Hwnd>()
                    .Where(hw => hw.topmost && hw.Mapped && hw.Visible).ToArray();
            foreach (Hwnd hw in menu)
            {
                var ctlmenu = Control.FromHandle(hw.ClientWindow);
                if (ctlmenu != null)
                    DrawOntoCanvas(hw.ClientWindow, canvas, true);
            }

    //if (Device.RuntimePlatform != Device.macOS && Device.RuntimePlatform != Device.UWP)
            {
                canvas.Restore();
                var path = new SKPath();

                path.MoveTo(cursorPoints.First());
                cursorPoints.ForEach(a => path.LineTo(a));
                path.Transform(new SKMatrix(1, 0, XplatUI.driver.MousePosition.X, 0, 1,
                    XplatUI.driver.MousePosition.Y, 0, 0, 1));

                canvas.DrawPath(path,
                    new SKPaint()
                    {Color = SKColors.White, Style = SKPaintStyle.Fill, StrokeJoin = SKStrokeJoin.Miter});
                canvas.DrawPath(path,
                    new SKPaint()
                    {Color = SKColors.Black, Style = SKPaintStyle.Stroke, StrokeJoin = SKStrokeJoin.Miter, IsAntialias = true});
            }

            canvas.DrawText("" + DateTime.Now.ToString("HH:mm:ss.fff"),
                new SKPoint(10, 10), new SKPaint() {Color = SKColor.Parse("ffff00")});

            canvas.Flush();

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
        finally
        {

        }
    }

    private SKPoint[] cursorPoints = new SKPoint[]
    {
        new SKPoint(0f, 0f),
        new SKPoint(0f, 16.512804f),
        new SKPoint(4.205124f, 12.717936f),
        new SKPoint(7.589736f, 19.99998f),
        new SKPoint(9.641016f, 19.076904f),
        new SKPoint(6.256404f, 11.79486f),
        new SKPoint(12.102552f, 11.179476f),
        new SKPoint(0f, 0f),
    };

    private SizeF scale = new SizeF(1, 1);

    private void Callback(MouseEventArgs obj)
    {
        XplatUI.driver.SetCursorPos(IntPtr.Zero, (int) obj.OffsetX, (int) obj.OffsetY);
    }

}
